name: CI

on: [push, pull_request]

env:
  CACHE_IMAGE: fmrcampos/docker-ci-cache
  DOCKER_BUILDKIT: 1
  NODE_VERSION: 14.4.0

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Log in to docker hub
        run: echo ${{ secrets.REGISTRY_PASS }} | docker login -u ${{ secrets.REGISTRY_USER }} --password-stdin
      - name: Build static from dockerfile
        run: |
          docker build \
            --target static \
            --cache-from $CACHE_IMAGE:static \
            --tag $CACHE_IMAGE:static \
            --file ./Dockerfile \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            "."
      - name: Build build from dockerfile
        run: |
          docker build \
            --target build \
            --cache-from $CACHE_IMAGE:static \
            --cache-from $CACHE_IMAGE:build \
            --tag $CACHE_IMAGE:build \
            --file ./Dockerfile \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            "."
      - name: Build stage from dockerfile
        run: |
          docker build \
            --cache-from $CACHE_IMAGE:build \
            --cache-from $CACHE_IMAGE:stage \
            --tag $CACHE_IMAGE:stage \
            --file ./Dockerfile \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            "."
      - name: Push static image to docker hub
        run: docker push $CACHE_IMAGE:static
      - name: Push build image to docker hub
        run: docker push $CACHE_IMAGE:build
      - name: Push stage image to docker hub
        run: docker push $CACHE_IMAGE:stage

  compose-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Run tests
        run: |
          apt-get update && apt-get -y install make
          make tests ACTIONS=true
  
  test:
    if: false
    needs: build
    runs-on: ubuntu-latest
    container: fmrcampos/docker-ci-cache:stage
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          apt-get update && apt-get -y install make locales build-essential curl libpq-dev autoconf nodejs postgresql-client
          apt -y install libcurl4-openssl-dev libssl-dev pkg-config
          echo "LC_ALL=en_US.UTF-8" >> /etc/environment
          echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
          echo "LANG=en_US.UTF-8" > /etc/locale.conf
          locale-gen en_US.UTF-8
          curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash
          export NVM_DIR="$HOME/.nvm" 
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
          nvm install $NODE_VERSION
          pip install -U pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements/dev.txt
          npm i -g npm
          npm install -g gulp-cli
          npm ci

      - name: Run tests and PostreSQL service container
        run: |
          python -m coverage run -m pytest --strict --postgresql-host postgres --postgresql-password postgres
          python -m coverage html
          python -m coverage report -m --fail-under 100
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: postgres
          # The default PostgreSQL port
          POSTGRES_PORT: 5432
          # The postgres password
          POSTGRES_PASSWORD: postgres

  lint:
    needs: build
    runs-on: ubuntu-latest
    container: fmrcampos/docker-ci-cache:stage
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Lint
        run: |
          apt-get update && apt-get install make
          make lint ACTIONS=true

  docs:
    needs: build
    runs-on: ubuntu-latest
    container: fmrcampos/docker-ci-cache:stage
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Documentation
        run: |
          apt-get update && apt-get install make
          make docs
  
  deps:
    needs: build
    runs-on: ubuntu-latest
    container: fmrcampos/docker-ci-cache:stage
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Dependencies
        run: |
          apt-get update && apt-get -y install build-essential make libpq-dev
          apt -y install libcurl4-openssl-dev libssl-dev pkg-config
          pip install -U pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements/dev.txt # this is probably happening twice
          make deps

  licenses:
    needs: build
    runs-on: ubuntu-latest
    container: fmrcampos/docker-ci-cache:stage
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Licenses
        run: bin/licenses
  
  translations:
    needs: build
    runs-on: ubuntu-latest
    container: fmrcampos/docker-ci-cache:stage
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Translations
        run:
          apt-get update && apt-get -y install make
          make translations

  static-tests:
    needs: build
    runs-on: ubuntu-latest
    container: fmrcampos/docker-ci-cache:static
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Static Tests
        run: |
          apt-get update && apt-get -y install locales
          echo "LC_ALL=en_US.UTF-8" >> /etc/environment
          echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
          echo "LANG=en_US.UTF-8" > /etc/locale.conf
          locale-gen en_US.UTF-8
          npm install -D babel
          bin/static_tests

  static-lint:
    needs: build
    runs-on: ubuntu-latest
    container: fmrcampos/docker-ci-cache:static
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Lint
        run: |
          npm install eslint --save-dev
          ./node_modules/.bin/eslint 'warehouse/static/js/**' '**.js' 'tests/frontend/**' --ignore-pattern 'warehouse/static/js/vendor/**'
          ./node_modules/.bin/sass-lint --verbose

  static-pipeline:
    needs: build
    runs-on: ubuntu-latest
    container: fmrcampos/docker-ci-cache:static
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Static Pipeline
        run: |
          apt-get update && apt-get -y install locales
          echo "LC_ALL=en_US.UTF-8" >> /etc/environment
          echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
          echo "LANG=en_US.UTF-8" > /etc/locale.conf
          locale-gen en_US.UTF-8
          npm install -D babel
          bin/static_pipeline