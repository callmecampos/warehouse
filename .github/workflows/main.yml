name: CI

on: [push, pull_request]

env:
  CACHE_IMAGE: fmrcampos/docker-ci-cache
  GPR_CACHE_IMAGE: docker.pkg.github.com/${{ github.repository }}/docker-ci-cache
  CACHE_SEED: 1
  DOCKER_BUILDKIT: 1
  NODE_VERSION: 14.4.0

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:10.1
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - uses: whoan/docker-build-with-cache-action@master
        with:
          image_name: ${{ env.CACHE_IMAGE }}
          image_tag: stage
          build_extra_args: "--cache-from ${{ env.CACHE_IMAGE }}:static --cache-from ${{ env.CACHE_IMAGE }}:build --cache-from ${{ env.CACHE_IMAGE }}:stage --build-arg BUILDKIT_INLINE_CACHE=1"
          push_image_and_stages: false

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Cache pip dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-pip-deps-dh
        with:
          path: ./.cache/pip
          key: ${{ runner.os }}-${{ env.CACHE_SEED }}-${{ github.job }}-${{ env.cache-name }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_SEED }}-${{ github.job }}-${{ env.cache-name }}-
            ${{ runner.os }}-${{ env.CACHE_SEED }}-${{ github.job }}-
            ${{ runner.os }}-${{ env.CACHE_SEED }}-
            ${{ runner.os }}-

      - name: Cache node version manager
        uses: actions/cache@v2
        env:
          cache-name: cache-nvm-dh
        with:
          path: ~/.nvm/versions/
          key: ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-${{ env.cache-name }}-
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-npm-modules-dh
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-${{ env.cache-name }}-
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: sudo apt -y install libcurl4-openssl-dev libssl-dev pkg-config

      - name: Install pip requirements
        run: |
          mkdir ./.cache && mkdir ./.cache/pip
          chown -R $(whoami) ./.cache/pip
          pip install -U pip setuptools wheel --cache-dir ./.cache/pip
          pip install -r requirements.txt --cache-dir ./.cache/pip
          pip install -r requirements/dev.txt --cache-dir ./.cache/pip
          
      - name: Setup node
        run: |
          curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash
          export NVM_DIR="$HOME/.nvm" 
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
          nvm install $NODE_VERSION
          npm i -g npm
          npm install -g gulp-cli
          npm ci

      - name: Run tests
        run: |
          python -m coverage run -m pytest --strict --postgresql-host localhost
          python -m coverage html
          python -m coverage report -m --fail-under 100
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: localhost
          # The default PostgreSQL port
          POSTGRES_PORT: 5432

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Pull multi-stage Docker images
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
          docker pull $GPR_CACHE_IMAGE:static
          docker pull $GPR_CACHE_IMAGE:build
          docker pull $GPR_CACHE_IMAGE:stage

      - uses: whoan/docker-build-with-cache-action@master
        with:
          registry: docker.pkg.github.com
          image_name: ${{ env.GPR_CACHE_IMAGE }}
          image_tag: stage
          build_extra_args: "--cache-from ${{ env.GPR_CACHE_IMAGE }}:static --cache-from ${{ env.GPR_CACHE_IMAGE }}:build --cache-from ${{ env.GPR_CACHE_IMAGE }}:stage"
          push_image_and_stages: false

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Lint
        run: |
          sudo apt-get update && sudo apt-get install make
          make lint ACTIONS=true

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - uses: whoan/docker-build-with-cache-action@master
        with:
          image_name: ${{ env.CACHE_IMAGE }}
          image_tag: stage
          build_extra_args: "--cache-from ${{ env.CACHE_IMAGE }}:static --cache-from ${{ env.CACHE_IMAGE }}:build --cache-from ${{ env.CACHE_IMAGE }}:stage --build-arg BUILDKIT_INLINE_CACHE=1"
          push_image_and_stages: false

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Documentation
        run: |
          sudo apt-get update && sudo apt-get install make
          make docs
  
  deps:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - uses: whoan/docker-build-with-cache-action@master
        with:
          image_name: ${{ env.CACHE_IMAGE }}
          image_tag: stage
          build_extra_args: "--cache-from ${{ env.CACHE_IMAGE }}:static --cache-from ${{ env.CACHE_IMAGE }}:build --cache-from ${{ env.CACHE_IMAGE }}:stage --build-arg BUILDKIT_INLINE_CACHE=1"
          push_image_and_stages: false

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Cache pip dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-pip-deps-dh
        with:
          path: ./.cache/pip
          key: ${{ runner.os }}-${{ env.CACHE_SEED }}-${{ github.job }}-${{ env.cache-name }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_SEED }}-${{ github.job }}-${{ env.cache-name }}-
            ${{ runner.os }}-${{ env.CACHE_SEED }}-${{ github.job }}-
            ${{ runner.os }}-${{ env.CACHE_SEED }}-
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          sudo apt -y install libcurl4-openssl-dev libssl-dev pkg-config
          mkdir ./.cache && mkdir ./.cache/pip
          chown -R $(whoami) ./.cache/pip
          pip install -U pip setuptools wheel --cache-dir ./.cache/pip
          pip install -r requirements.txt --cache-dir ./.cache/pip
          pip install -r requirements/dev.txt --cache-dir ./.cache/pip

      - name: Check dependencies
        run: make deps

  licenses:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - uses: whoan/docker-build-with-cache-action@master
        with:
          image_name: ${{ env.CACHE_IMAGE }}
          image_tag: stage
          build_extra_args: "--cache-from ${{ env.CACHE_IMAGE }}:static --cache-from ${{ env.CACHE_IMAGE }}:build --cache-from ${{ env.CACHE_IMAGE }}:stage --build-arg BUILDKIT_INLINE_CACHE=1"
          push_image_and_stages: false

      - name: Check licenses
        run: bin/licenses
  
  translations:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - uses: whoan/docker-build-with-cache-action@master
        with:
          image_name: ${{ env.CACHE_IMAGE }}
          image_tag: stage
          build_extra_args: "--cache-from ${{ env.CACHE_IMAGE }}:static --cache-from ${{ env.CACHE_IMAGE }}:build --cache-from ${{ env.CACHE_IMAGE }}:stage --build-arg BUILDKIT_INLINE_CACHE=1"
          push_image_and_stages: false

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Check translations
        run: make translations

  static-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - uses: whoan/docker-build-with-cache-action@master
        with:
          image_name: ${{ env.CACHE_IMAGE }}
          image_tag: static
          build_extra_args: "--target static --cache-from ${{ env.CACHE_IMAGE }}:static --build-arg BUILDKIT_INLINE_CACHE=1"
          push_image_and_stages: false

      - name: Static Lint Check
        run: |
          npm install eslint --save-dev
          ./node_modules/.bin/eslint 'warehouse/static/js/**' '**.js' 'tests/frontend/**' --ignore-pattern 'warehouse/static/js/vendor/**'
          ./node_modules/.bin/sass-lint --verbose

  static-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - uses: whoan/docker-build-with-cache-action@master
        with:
          image_name: ${{ env.CACHE_IMAGE }}
          image_tag: static
          build_extra_args: "--target static --cache-from ${{ env.CACHE_IMAGE }}:static --build-arg BUILDKIT_INLINE_CACHE=1"
          push_image_and_stages: false

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules-static-dh
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-${{ env.cache-name }}-
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Dependency Setup
        run: npm install -D babel

      - name: Static Tests
        run: bin/static_tests

  static-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - uses: whoan/docker-build-with-cache-action@master
        with:
          image_name: ${{ env.CACHE_IMAGE }}
          image_tag: static
          build_extra_args: "--target static --cache-from ${{ env.CACHE_IMAGE }}:static --build-arg BUILDKIT_INLINE_CACHE=1"
          push_image_and_stages: false

      - name: Cache node version manager
        uses: actions/cache@v2
        env:
          cache-name: cache-nvm-pipeline-dh
        with:
          path: ~/.nvm/versions/
          key: ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-${{ env.cache-name }}-
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules-static-dh
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-${{ env.cache-name }}-
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-${{ github.job }}-
            ${{ runner.os }}-build-${{ env.CACHE_SEED }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Dependency Setup
        run: npm install -D babel

      - name: Static Pipeline Check
        run: bin/static_pipeline